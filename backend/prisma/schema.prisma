generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DEV_DATABASE_URL")
}

model administrator {
  id         Int      @id @default(autoincrement())
  authority  Int
  profile_id Int?
  profile    profile? @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "administrator_ibfk_1")

  @@index([profile_id], map: "profile_id")
}

model assessment {
  id              Int        @id @default(autoincrement())
  token           String     @db.VarChar(255)
  assessment_map  Json
  assessment_res  Json?
  points          Float?
  possible        Float?
  due_date        DateTime   @db.DateTime(0)
  start_date      DateTime?  @db.DateTime(0)
  completion_date DateTime?  @db.DateTime(0)
  duration        Int
  assigned        assigned[]
}

model assigned {
  id            Int         @id @default(autoincrement())
  enrollment_id Int?
  assignment_id Int?
  assessment_id Int?
  assessment    assessment? @relation(fields: [assessment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assigned_ibfk_3")
  assignment    assignment? @relation(fields: [assignment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assigned_ibfk_2")
  enrollment    enrollment? @relation(fields: [enrollment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "assigned_ibfk_1")

  @@index([assessment_id], map: "assessment_id")
  @@index([assignment_id], map: "assignment_id")
  @@index([enrollment_id], map: "enrollment_id")
}

model assignment {
  id           Int        @id @default(autoincrement())
  uuid         Int        @unique(map: "uuid")
  content_type String     @db.VarChar(255)
  points       Float?
  possible     Float?
  due_date     DateTime?  @db.DateTime(0)
  assigned     assigned[]
}

model availability {
  id                 Int               @id @default(autoincrement())
  course_id          Int?
  term               availability_term
  academic_year      Int
  registration_start DateTime          @db.Date
  registration_end   DateTime          @db.Date
  course             course?           @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "availability_ibfk_1")
  section            section[]

  @@index([course_id], map: "course_id")
}

model building {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  college_id Int?
  college    college?  @relation(fields: [college_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "building_ibfk_1")
  section    section[]

  @@index([college_id], map: "college_id")
  @@unique(fields: [college_id, name], name: "uniqueBuilding")
}

model college {
  id         Int          @id @default(autoincrement())
  name       String       @unique(map: "college_name_uindex") @db.VarChar(255)
  building   building[]
  major      major[]
  department department[]
}

model course {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  credit_hours Int
  major_id     Int?
  major        major?         @relation(fields: [major_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "course_ibfk_1")
  availability availability[]

  @@index([major_id], map: "major_id")
}

model credentials {
  id               Int       @id @default(autoincrement())
  password_hash    String    @unique(map: "password_hash") @db.VarChar(255)
  password_updated DateTime? @db.DateTime(0)
  last_login       DateTime? @db.DateTime(0)
  signup_date      DateTime  @db.DateTime(0)
  profile          profile[]
}

model department {
  id            Int         @id @default(autoincrement())
  instructor_id Int?
  college_id    Int
  college       college     @relation(fields: [college_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_ibfk_2")
  instructor    instructor? @relation(fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_ibfk_1")

  @@index([instructor_id], map: "instructor_id")
}

model enrollment {
  id         Int         @id @default(autoincrement())
  student_id Int?
  section_id Int?
  section    section?    @relation(fields: [section_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_ibfk_2")
  student    student?    @relation(fields: [student_id], references: [enrollment_id], onDelete: NoAction, onUpdate: NoAction, map: "enrollment_ibfk_1")
  assigned   assigned[]
  messaging  messaging[]

  @@index([section_id], map: "section_id")
  @@index([student_id], map: "student_id")
}

model instructor {
  id         Int          @id @default(autoincrement())
  profile_id Int?
  profile    profile?     @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "instructor_ibfk_1")
  department department[]
  section    section[]

  @@index([profile_id], map: "profile_id")
}

model major {
  id         Int       @id @default(autoincrement())
  college_id Int
  name       String    @db.VarChar(255)
  college    college   @relation(fields: [college_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "major_ibfk_1")
  course     course[]
  student    student[]

  @@unique(fields: [college_id, name], name: "uniqueMajor")
  @@index([college_id], map: "college_id")
}

model messaging {
  id            Int         @id @default(autoincrement())
  enrollment_id Int?
  sent_date     DateTime    @db.DateTime(0)
  content       String      @db.VarChar(1000)
  enrollment    enrollment? @relation(fields: [enrollment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "messaging_ibfk_1")

  @@index([enrollment_id], map: "enrollment_id")
}

model profile {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  email          String          @unique(map: "email") @db.VarChar(255)
  biography      String?         @db.VarChar(300)
  university     String?         @db.VarChar(255)
  credentials_id Int?
  credentials    credentials?    @relation(fields: [credentials_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profile_ibfk_1")
  administrator  administrator[]
  instructor     instructor[]
  student        student[]

  @@index([credentials_id], map: "credentials_id")
}

model section {
  id              Int          @id @default(autoincrement())
  availability_id Int
  instructor_id   Int
  course_tag      String       @db.VarChar(255)
  section_crn     Int          @unique(map: "section_crn")
  section_start   DateTime?    @db.Date
  section_end     DateTime?    @db.Date
  building_id     Int?
  room_num        String?
  schedule        String?      @db.VarChar(255)
  online          Boolean
  availability    availability @relation(fields: [availability_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "section_ibfk_1")
  building        building?    @relation(fields: [building_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "section_ibfk_3")
  instructor      instructor   @relation(fields: [instructor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "section_ibfk_2")
  enrollment      enrollment[]

  @@index([availability_id], map: "availability_id")
  @@index([building_id], map: "building_id")
  @@index([instructor_id], map: "instructor_id")
}

model student {
  id            Int          @id @default(autoincrement())
  major_id      Int?
  enrollment_id Int?         @unique(map: "enrollment_id")
  profile_id    Int
  major         major?       @relation(fields: [major_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_1")
  profile       profile      @relation(fields: [profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "student_ibfk_2")
  enrollment    enrollment[]

  @@index([major_id], map: "major_id")
  @@index([profile_id], map: "profile_id")
}

enum availability_term {
  spring
  summer
  summer_mm1
  summer_mm2
  fall
}
